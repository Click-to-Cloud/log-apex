{"title":"Log.apex","githubRepo":"Click-to-Cloud/Log.apex","googleAnalytics":"","index":{"title":"Home","description":"Log.apex is a library to provide easy-to-use logging functionality to your app.","content":" Simple API Log.apex offers simple API to use. Configuration Log.apex has fine control over loggers. Customization Log.apex allows you to create custom logging implementation. ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/log-apex/./","children":{"docs":{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/log-apex/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/log-apex/docs/search.html"},"Appenders":{"children":{"async":{"title":"Async Logging","description":"Async Logging","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} Async Logging Log.apex implements async logging by buffering all logging requests into a queue, and flush the queue in a queueable job to finally complete the logging. Therefore, a very important thing is that you are forced to call flush at the end of the execution context. Otherwise, all the buffered logging requests are discarded. logger.debug('message'); // ... Log.flush(); Usually you put Log.flush() at the end of remote action calls, visualforce page controller actions, web service actions and so on. ","srcFilePath":"src/pages/docs/Appenders/async.md","id":"async","location":"/docs/Appenders/async.html","url":"/log-apex/docs/Appenders/async.html"},"customAppender":{"title":"Custom Appenders","description":"Custom Appenders","layout":"guide","icon":"cloud","weight":3,"content":" {$page.description} Custom Appender You can create a custom appender in two ways: Implement Log.Appender Example: public class CustomAppender implements Log.Appender { private Map options; public void setOptions(Map options) { this.options = options; } public void append(Context ctx) { // Custom code } } Extend Log.DefaultAppender Example: public class CustomAppender extends Log.DefaultAppender { public override void append(Log.Context ctx) { String message = ctx.message; String pattern = (String)this.options.get('pattern'); // Custom code } } ","srcFilePath":"src/pages/docs/Appenders/customAppender.md","id":"customAppender","location":"/docs/Appenders/customAppender.html","url":"/log-apex/docs/Appenders/customAppender.html"},"customAsyncAppender":{"title":"Custom Async Appenders","description":"Custom Async Appenders","layout":"guide","icon":"cloud","weight":6,"content":" {$page.description} Custom Appender You can create a custom async appender in two ways: Implement Log.AsyncAppender Example: public class CustomAsyncAppender implements Log.AsyncAppender { private Map options; private List contexts = new List(); public void setOptions(Map options) { this.options = options; } public void append(Context ctx) { this.contexts.add(ctx); } public void flush() { // Custom code } } Extend Log.DefaultAsyncAppender Example: public class CustomAsyncAppender extends Log.DefaultAsyncAppender { public override void flush() { for(Log.Context ctx : this.contexts) { String message = ctx.message; // Custom code } } } ","srcFilePath":"src/pages/docs/Appenders/customAsyncAppender.md","id":"customAsyncAppender","location":"/docs/Appenders/customAsyncAppender.html","url":"/log-apex/docs/Appenders/customAsyncAppender.html"},"defaultAppender":{"title":"Default Appenders","description":"Default Appenders","layout":"guide","icon":"cloud","weight":2,"content":" {$page.description} Default Appender Log.apex has a default appender, Log.DefaultAppender, which outputs logging information to System.debug. The default appender outputs messages with current class name, current method name, current line number and current column number. 11:18:39.50 (103576326)|USER_DEBUG|[984]|DEBUG|AnonymousBlock.(unknown method) Line 2 Column 1 - debug message Options We can customize how the prefix message looks like: [ { \"patterns\": [ \"test\" ], \"level\": \"Debug\", \"appenders\": [ { \"name\": \"Log.DefaultAppender\", \"options\": { \"prefixPattern\": \"%t - %m - %l - %c - \" } } ] } ] And debug like this: logger.debug('message'); The output will be like 'CurrentClassName - CurrentMethodName - CurrentLineNumber - CurrentColumnNumber - message'. ","srcFilePath":"src/pages/docs/Appenders/defaultAppender.md","id":"defaultAppender","location":"/docs/Appenders/defaultAppender.html","url":"/log-apex/docs/Appenders/defaultAppender.html"},"defaultAsyncAppender":{"title":"Default Async Appenders","description":"Default Async Appenders","layout":"guide","icon":"cloud","weight":5,"content":" {$page.description} Default Appender Log.apex has a default async appender, Log.DefaultAsyncAppender, which outputs logging information to System.debug asynchronously in a queueable job. The default async appender has similar behavior as the default appender except that it runs asynchronously. Here is how you configure it. [ { \"patterns\": [ \"testAsync\" ], \"level\": \"Debug\", \"appenders\": [ { \"name\": \"Log.DefaultAsyncAppender\" } ] } ] Options The default async appender shares the same options as the default appender. ","srcFilePath":"src/pages/docs/Appenders/defaultAsyncAppender.md","id":"defaultAsyncAppender","location":"/docs/Appenders/defaultAsyncAppender.html","url":"/log-apex/docs/Appenders/defaultAsyncAppender.html"}},"title":"Appenders","description":"Appenders","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} Logging Appenders Logging appenders are used to append the logging information to somewhere. For example, Log.DefaultAppender sends logs to System.debug. We may apply different implementation in custom logging appenders, so that we can extend Log.apex. Check default appenders and custom appenders for details. Async Appenders Log.apex supports async logging by the use of async appenders. Differently from default appenders, async appenders will collect the logging information(Log.Context) and process all in one batch during the flush. Check the async appenders for details. ","srcFilePath":"src/pages/docs/Appenders/index.md","id":"Appenders","location":"/docs/Appenders/","url":"/log-apex/docs/Appenders/","childIds":["defaultAppender","customAppender","async","defaultAsyncAppender","customAsyncAppender"]},"Configuration":{"children":{"config":{"title":"Configure Logging","description":"Configure Logging","layout":"guide","icon":"code-file","weight":3,"content":" {$page.description} Configure Logging We can configure logging before we create any loggers like this: Log.configureFromFile('otherLogging'); Log.apex supports the following logging sources. | Method | Description | | ------ | ----------- | | configureDefault() | Load the config from 'logging' static resource | | configureFromFile(String) | Load the config from the static resource specified by the name | | configureFromJSON(String) | Load the config from the JSON string | | configure(List&lt;Log.Rule&gt;) | Load the config from the list of rules | ","srcFilePath":"src/pages/docs/Configuration/config.md","id":"config","location":"/docs/Configuration/config.html","url":"/log-apex/docs/Configuration/config.html"},"rules":{"title":"Configuration File","description":"Configuration File","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} Configuration A configuration file is a JSON file that contains an array of configuration rules. [ { ... }, { ... } ] Configuration Rule A configuration rule specifies how the loggers should behave. { \"patterns\": [ \"test\" ], \"level\": \"Debug\", \"appenders\": [ { \"name\": \"Log.DefaultAppender\" } ] } It has following fields. | Field | Description | | ----- | ----------- | | patterns | An array of regular expressions to match the names of the loggers | | level | The starting level to enable logging | | appenders | An array of appender configurations | Appender Configuration An appender configuration is used to configure each appender, which outputs the logging information. { \"name\": \"Log.DefaultAppender\", \"options\": { \"prefixPattern\": \"...\" } } It has following fields. | Field | Description | | ----- | ----------- | | name | The class name of the appender | | options | The JSON object(map) to hold the option values | ","srcFilePath":"src/pages/docs/Configuration/rules.md","id":"rules","location":"/docs/Configuration/rules.html","url":"/log-apex/docs/Configuration/rules.html"}},"title":"Configuration","description":"Configuration","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} Logging Configuration We use a static resource containing a single JSON file to configure Log.apex. [ { \"patterns\": [ \"test\" ], \"level\": \"Debug\", \"appenders\": [ { \"name\": \"Log.DefaultAppender\" } ] } ] ","srcFilePath":"src/pages/docs/Configuration/index.md","id":"Configuration","location":"/docs/Configuration/","url":"/log-apex/docs/Configuration/","childIds":["rules","config"]},"Logger":{"title":"Logger","description":"Logger","layout":"guide","icon":"flash","weight":1,"content":" {$page.description} Loggers Log.apex use logger objects to print logging information. private static final Log logger = Log.getLogger(MyClass.class); logger.debug('Debug message'); Logger Creation We have two ways to create loggers. Create By Class We can pass in a class to create a logger. private static final Log logger = Log.getLogger(MyClass.class); Create By Name We can pass in a name to create a logger. private static final Log logger = Log.getLogger('MyClass'); Methods are below: | Method | Description | | ------ | ----------- | | Log getLogger(Type) | Get the logger from the type | | Log getLogger(String) | Get the logger from the name | Log Levels We support these logging levels in Log.apex. | Level | Description | | ----- | ----------- | | None | No log | | Error | Error log | | Warn | Warning log | | Info | Info log | | Debug | Debug log | | Trace | Trace log | Print Logs We can print logs in the following ways: Simple message We output a simple message using the logger. logger.debug('Debug message'); Parameterized message We show a parameterized message, with parameters passed in. logger.debug('Debug {0}', 'message'); Users should avoid concatenating strings in the logging method. Instead, use the parameterized messages, as the actual interpolation of the message is only triggered when the logging is enabled. So this will avoid unnecessary performance penalty. Controlled logging We can even check if the logging is enabled before we do the logging. if(logger.isDebugEnabled()) { logger.debug('Debug {0}', getComplexResult()); } This will help avoid complicated computation for the parameter values if the logging is actually disabled. Available methods are below: | Method | Description | | ------ | ----------- | | Boolean isTraceEnabled() | Check if Trace is enabled | | void trace(String) | Print the Trace log | | void trace(String, Object) | Print the Trace log with one parameter | | void trace(String, Object, Object) | Print the Trace log with two parameters | | void trace(String, Object, Object, Object) | Print the Trace log with three parameters | | void trace(String, List&lt;Object&gt;) | Print the Trace log with parameters | | Boolean isDebugEnabled() | Check if Debug is enabled | | void debug(String) | Print the Debug log | | void debug(String, Object) | Print the Debug log with one parameter | | void debug(String, Object, Object) | Print the Debug log with two parameters | | void debug(String, Object, Object, Object) | Print the Debug log with three parameters | | void debug(String, List&lt;Object&gt;) | Print the Debug log with parameters | | Boolean isInfoEnabled() | Check if Info is enabled | | void info(String) | Print the Info log | | void info(String, Object) | Print the Info log with one parameter | | void info(String, Object, Object) | Print the Info log with two parameters | | void info(String, Object, Object, Object) | Print the Info log with three parameters | | void info(String, List&lt;Object&gt;) | Print the Info log with parameters | | Boolean isWarnEnabled() | Check if Warn is enabled | | void warn(String) | Print the Warn log | | void warn(String, Object) | Print the Warn log with one parameter | | void warn(String, Object, Object) | Print the Warn log with two parameters | | void warn(String, Object, Object, Object) | Print the Warn log with three parameters | | void warn(String, List&lt;Object&gt;) | Print the Warn log with parameters | | Boolean isErrorEnabled() | Check if Error is enabled | | void error(Exception) | Print the Error log | | void error(String, Exception) | Print the Error log | | void error(String, Object, Exception) | Print the Error log with one parameter | | void error(String, Object, Object, Exception) | Print the Error log with two parameters | | void error(String, Object, Object, Object, Exception) | Print the Error log with three parameters | | void error(String, List&lt;Object&gt;, Exception) | Print the Error log with parameters | ","srcFilePath":"src/pages/docs/Logger/index.md","id":"Logger","location":"/docs/Logger/","url":"/log-apex/docs/Logger/"}},"childIds":["Logger","Configuration","Appenders","search"]},"tutorials":{"title":"Tutorials","description":"The tutorials","url":"/log-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","customURL":true,"children":{"getting_started":{"title":"Getting Started","description":"The Getting Started Tutorial","tutorialTitle":"Getting started with Log.apex","url":"/log-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/getting_started/index.soy","id":"getting_started","location":"/tutorials/getting_started/","customURL":true,"children":{"step_1":{"title":"Installation","description":"Include Apex files","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":1,"content":" {$page.title} Include logging.resource(optional), Log.cls, and LogTest.cls(optional) into your Org, and you are ready to go. If you want to use Func Package, please include LogPackage.cls. You can check more on R.apex. ","srcFilePath":"src/pages/tutorials/getting_started/step_1.md","id":"step_1","location":"/tutorials/getting_started/step_1.html","url":"/log-apex/tutorials/getting_started/step_1.html"},"step_2":{"title":"Loggers","description":"Loggers","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":2,"content":" {$page.title} We need to create an instance of logger before we start to do logging. private static final Log logger = Log.getLogger(MyClass.class); You can pass in the current class to get the logger instance. Alternatively, you can pass in a unique string to get the logger. private static final Log logger = Log.getLogger('MyClass'); ","srcFilePath":"src/pages/tutorials/getting_started/step_2.md","id":"step_2","location":"/tutorials/getting_started/step_2.html","url":"/log-apex/tutorials/getting_started/step_2.html"},"step_3":{"title":"Log Information","description":"Log Information","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":3,"content":" {$page.title} Log.apex supports these log levels: Error Warn Info Debug Trace You can use any of these logging levels to print the log information. logger.debug('Debug message'); Or you can pass in parameters: logger.debug('Debug {0}', 'message'); Or you can check it for performance's sake. if(logger.isDebugEnabled()) { logger.debug('Debug {0}', 'message'); } However, with logging level Error, you need to provide the exception. try { // ... } catch(Exception ex) { logger.error('some error', ex); } ","srcFilePath":"src/pages/tutorials/getting_started/step_3.md","id":"step_3","location":"/tutorials/getting_started/step_3.html","url":"/log-apex/tutorials/getting_started/step_3.html"},"step_4":{"title":"Configuration","description":"Configuration","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":4,"content":" {$page.title} We can configure the logging behavior by creating a static resource named 'logging', with the content to be a json file. [ { \"patterns\": [ \"test\" ], \"level\": \"Debug\", \"appenders\": [ { \"name\": \"Log.DefaultAppender\" } ] } ] This will control the logger named 'test', created below. private static final Log logger = Log.getLogger('test'); Patterns here support regular expressions, and you can set multiple patterns as well. And the config will enable the 'test' logger to print any information with level no less than 'Debug'(Debug, Info, Warn, Error). Besides, it specifies the appender, which is used to append the log information to somewhere. Here we used the default appender, which uses System.debug as the logging output. Log.DefaultAppender is the name of the appender class. If you want to use your custom appender, please set the appender name here. You can also load configuration files with other names. Log.configureFromFile('otherLogging'); Just make sure to put this code before you create any loggers. ","srcFilePath":"src/pages/tutorials/getting_started/step_4.md","id":"step_4","location":"/tutorials/getting_started/step_4.html","url":"/log-apex/tutorials/getting_started/step_4.html"},"step_5":{"title":"Logging Appender","description":"Logging Appender","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":5,"content":" {$page.title} Logging appenders are used to process the log information. For example, the default appender sends the log to System.debug. The default appender supports a prefix pattern, which can customize the prefix of the message. [ { \"patterns\": [ \"test\" ], \"level\": \"Debug\", \"appenders\": [ { \"name\": \"Log.DefaultAppender\", \"options\": { \"prefixPattern\": \"%t - %m - %l - %c - \" } } ] } ] And your logger debugs some messages. logger.debug('message'); The output will be like 'CurrentClassName - CurrentMethodName - CurrentLineNumber - CurrentColumnNumber - message'. ","srcFilePath":"src/pages/tutorials/getting_started/step_5.md","id":"step_5","location":"/tutorials/getting_started/step_5.html","url":"/log-apex/tutorials/getting_started/step_5.html"},"step_6":{"title":"Custom Appender","description":"Custom Appender","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":6,"content":" {$page.title} You can create your own appenders. All appenders should implement the interface Log.Appender. To make things simple, most of the time you can directly extend Log.DefaultAppender to create a custom appender. public class CustomAppender extends Log.DefaultAppender { public override void append(Log.Context ctx) { String message = ctx.message; String pattern = (String)this.options.get('pattern'); // Custom code } } Then you can add it to the configuration file. [ { \"patterns\": [ \".*\" ], \"level\": \"Debug\", \"appenders\": [ { \"name\": \"CustomAppender\", \"options\": { \"pattern\": \"YOUR PATTERN\" } } ] } ] You can set options to your custom appender like this. ","srcFilePath":"src/pages/tutorials/getting_started/step_6.md","id":"step_6","location":"/tutorials/getting_started/step_6.html","url":"/log-apex/tutorials/getting_started/step_6.html"},"step_7":{"title":"Async Logging","description":"Async Logging","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":7,"content":" {$page.title} Sometimes when you have database operations in your appender, this will have impact on the performance of your normal code. In this case, we need to use async logging, which moves the logging execution into a queueable job and thus will not affect the current code. To enable async logging, we need to use async appenders. Here is how we use the default async appender. [ { \"patterns\": [ \"testAsync\" ], \"level\": \"Debug\", \"appenders\": [ { \"name\": \"Log.DefaultAsyncAppender\" } ] } ] We use the system default asyn appender configured in this way. The note is that at the end of our execution context, we need to explicitly flush our log information, otherwise they will get discarded. logger.debug('message'); // ... Log.flush(); ","srcFilePath":"src/pages/tutorials/getting_started/step_7.md","id":"step_7","location":"/tutorials/getting_started/step_7.html","url":"/log-apex/tutorials/getting_started/step_7.html"},"step_8":{"title":"Custom Async Appender","description":"Custom Async Appender","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":8,"content":" {$page.title} To create a custom async appender, you can implement Log.AsyncAppender or extend Log.DefaultAsyncAppender. public class CustomAsyncAppender extends Log.DefaultAsyncAppender { public override void flush() { for(Log.Context ctx : this.contexts) { String message = ctx.message; // Custom code } } } ","srcFilePath":"src/pages/tutorials/getting_started/step_8.md","id":"step_8","location":"/tutorials/getting_started/step_8.html","url":"/log-apex/tutorials/getting_started/step_8.html"}},"childIds":["step_1","step_2","step_3","step_4","step_5","step_6","step_7","step_8"]}},"childIds":["getting_started"]}},"childIds":["docs","tutorials"]},"basePath":"/log-apex"}